// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// a_star_norm
double a_star_norm(const double& mean_p, const double& sd_p, const double& mean_n, const double& sd_n, const bool& do_log);
RcppExport SEXP _negmix_a_star_norm(SEXP mean_pSEXP, SEXP sd_pSEXP, SEXP mean_nSEXP, SEXP sd_nSEXP, SEXP do_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type mean_p(mean_pSEXP);
    Rcpp::traits::input_parameter< const double& >::type sd_p(sd_pSEXP);
    Rcpp::traits::input_parameter< const double& >::type mean_n(mean_nSEXP);
    Rcpp::traits::input_parameter< const double& >::type sd_n(sd_nSEXP);
    Rcpp::traits::input_parameter< const bool& >::type do_log(do_logSEXP);
    rcpp_result_gen = Rcpp::wrap(a_star_norm(mean_p, sd_p, mean_n, sd_n, do_log));
    return rcpp_result_gen;
END_RCPP
}
// a_star_gam
double a_star_gam(const double& alpha_p, const double& beta_p, const double& alpha_n, const double& beta_n, const bool& do_log);
RcppExport SEXP _negmix_a_star_gam(SEXP alpha_pSEXP, SEXP beta_pSEXP, SEXP alpha_nSEXP, SEXP beta_nSEXP, SEXP do_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha_p(alpha_pSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta_p(beta_pSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha_n(alpha_nSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta_n(beta_nSEXP);
    Rcpp::traits::input_parameter< const bool& >::type do_log(do_logSEXP);
    rcpp_result_gen = Rcpp::wrap(a_star_gam(alpha_p, beta_p, alpha_n, beta_n, do_log));
    return rcpp_result_gen;
END_RCPP
}
// cpp_map_pairs
arma::mat cpp_map_pairs(const double& delta, const Rcpp::List& par, const std::string& family);
RcppExport SEXP _negmix_cpp_map_pairs(SEXP deltaSEXP, SEXP parSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_map_pairs(delta, par, family));
    return rcpp_result_gen;
END_RCPP
}
// build_pairing
Rcpp::List build_pairing(const double& delta, const Rcpp::List& par, const std::string& family, const double& tol_simplex);
RcppExport SEXP _negmix_build_pairing(SEXP deltaSEXP, SEXP parSEXP, SEXP familySEXP, SEXP tol_simplexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const double& >::type tol_simplex(tol_simplexSEXP);
    rcpp_result_gen = Rcpp::wrap(build_pairing(delta, par, family, tol_simplex));
    return rcpp_result_gen;
END_RCPP
}
// dnormix
arma::vec dnormix(const arma::vec& x, const arma::vec& w, const arma::vec& mean, const arma::vec& sd);
RcppExport SEXP _negmix_dnormix(SEXP xSEXP, SEXP wSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(dnormix(x, w, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// dgammix
arma::vec dgammix(const arma::vec& x, const arma::vec& w, const arma::vec& alpha, const arma::vec& beta);
RcppExport SEXP _negmix_dgammix(SEXP xSEXP, SEXP wSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(dgammix(x, w, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// pnormix
arma::vec pnormix(const arma::vec& x, const arma::vec& w, const arma::vec& mean, const arma::vec& sd);
RcppExport SEXP _negmix_pnormix(SEXP xSEXP, SEXP wSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(pnormix(x, w, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// pgammix
arma::vec pgammix(const arma::vec& x, const arma::vec& w, const arma::vec& alpha, const arma::vec& inv_beta);
RcppExport SEXP _negmix_pgammix(SEXP xSEXP, SEXP wSEXP, SEXP alphaSEXP, SEXP inv_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type inv_beta(inv_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(pgammix(x, w, alpha, inv_beta));
    return rcpp_result_gen;
END_RCPP
}
// cpp_qnegmix
arma::vec cpp_qnegmix(const arma::vec& x, const Rcpp::List& par, const std::string& family, const double& precision, const unsigned& n_bins);
RcppExport SEXP _negmix_cpp_qnegmix(SEXP xSEXP, SEXP parSEXP, SEXP familySEXP, SEXP precisionSEXP, SEXP n_binsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const double& >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< const unsigned& >::type n_bins(n_binsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_qnegmix(x, par, family, precision, n_bins));
    return rcpp_result_gen;
END_RCPP
}
// render_model
Rcpp::List render_model(arma::uword& k_p, arma::uword& k_n, const std::string& family, const Rcpp::List& par, const bool& by_2, const Rcpp::List& control);
RcppExport SEXP _negmix_render_model(SEXP k_pSEXP, SEXP k_nSEXP, SEXP familySEXP, SEXP parSEXP, SEXP by_2SEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword& >::type k_p(k_pSEXP);
    Rcpp::traits::input_parameter< arma::uword& >::type k_n(k_nSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const bool& >::type by_2(by_2SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(render_model(k_p, k_n, family, par, by_2, control));
    return rcpp_result_gen;
END_RCPP
}
// cpp_rnegmix
Rcpp::List cpp_rnegmix(const unsigned& n, const Rcpp::List& par, const std::string& family, const std::string& method, const Rcpp::List& control);
RcppExport SEXP _negmix_cpp_rnegmix(SEXP nSEXP, SEXP parSEXP, SEXP familySEXP, SEXP methodSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_rnegmix(n, par, family, method, control));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_negmix_a_star_norm", (DL_FUNC) &_negmix_a_star_norm, 5},
    {"_negmix_a_star_gam", (DL_FUNC) &_negmix_a_star_gam, 5},
    {"_negmix_cpp_map_pairs", (DL_FUNC) &_negmix_cpp_map_pairs, 3},
    {"_negmix_build_pairing", (DL_FUNC) &_negmix_build_pairing, 4},
    {"_negmix_dnormix", (DL_FUNC) &_negmix_dnormix, 4},
    {"_negmix_dgammix", (DL_FUNC) &_negmix_dgammix, 4},
    {"_negmix_pnormix", (DL_FUNC) &_negmix_pnormix, 4},
    {"_negmix_pgammix", (DL_FUNC) &_negmix_pgammix, 4},
    {"_negmix_cpp_qnegmix", (DL_FUNC) &_negmix_cpp_qnegmix, 5},
    {"_negmix_render_model", (DL_FUNC) &_negmix_render_model, 6},
    {"_negmix_cpp_rnegmix", (DL_FUNC) &_negmix_cpp_rnegmix, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_negmix(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
